# -*- coding: utf-8 -*-
"""4.0- Data Interpolation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Z_iJvJkkZ7p7tKIlckmZYtWq5SAZAwf4

## Data Interpolation
Data interpolation is the process of estimating unknown values within a dataset based on the known values. In Python, there are various libraries available that can be used for data interpolation, such as NumPy, SciPy, and Pandas. Here is an example of how to perform data interpolation using the NumPy library:

## 1. Linear Interpolation
"""

import numpy as np
x=np.array([1,2,3,4,5])
y=np.array([2,4,6,8,10])

import matplotlib.pyplot as plt
plt.scatter(x,y)

## interpolate the data using linear interpolation
x_new=np.linspace(1,5,10) ##create new x values
y_interp=np.interp(x_new,x,y) ## interpolate y values
print(y_interp)

plt.scatter(x_new,y_interp)

"""## Cubic Interpolation With Scipy"""

import numpy as np
x=np.array([1,2,3,4,5])
y=np.array([1,8,27,64,125])

from scipy.interpolate import interp1d

##create a cubic interpolation function
f=interp1d(x,y,kind='cubic')

# interpolate the data
x_new = np.linspace(1, 5, 10)
y_interp=f(x_new)
print(y_interp)

plt.scatter(x,y)

plt.scatter(x_new,y_interp)

"""## Polynomial Interpolation"""

import numpy as np

# create some sample data
x = np.array([1, 2, 3, 4, 5])
y = np.array([1, 4, 9, 16, 25])

# interpolate the data using polynomial interpolation
p = np.polyfit(x, y, 2) # fit a 2nd degree polynomial to the data

x_new = np.linspace(1, 5, 10) # create new x values
y_interp = np.polyval(p, x_new) # interpolate y values

plt.scatter(x,y)

plt.scatter(x_new,y_interp)

